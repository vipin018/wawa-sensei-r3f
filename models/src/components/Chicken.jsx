/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.5.3 public/models/Chicken.glb -o src/components/Chicken.jsx -r public 
*/

import React, { useEffect, useRef } from 'react';
import { useGraph } from '@react-three/fiber';
import { useGLTF, useAnimations } from '@react-three/drei';
import { SkeletonUtils } from 'three-stdlib';
import { useControls } from 'leva';

export function Chicken(props) {
  const group = useRef();
  const { scene, animations } = useGLTF('/models/Chicken.glb');
  const clone = React.useMemo(() => (scene ? SkeletonUtils.clone(scene) : null), [scene]);
  const { nodes, materials } = useGraph(clone || new THREE.Object3D());
  const { actions } = useAnimations(animations || [], group);

  const animationOptions = actions ? Object.keys(actions) : [];

  const { animation } = useControls({
    animation: {
      value: animationOptions[1] || "Idle",
      options: animationOptions,
    },
  });

  useEffect(() => {
    if (actions && actions[animation]) {
      Object.values(actions).forEach(action => action.stop()); // Stop other animations
      actions[animation].reset().play();
    }
  }, [animation, actions]);

  if (!nodes || !materials) {
    return <p>Loading model...</p>;
  }

  return (
    <group ref={group} {...props} dispose={null}>
      <group name="Root_Scene">
        <group name="RootNode">
          <group name="Armature" rotation={[-Math.PI / 2, 0, 0]} scale={100}>
            {nodes.CORE && <primitive object={nodes.CORE} />}
          </group>
          {nodes.Cube001 && materials.ChickenGuy && (
            <skinnedMesh
              name="Cube001"
              geometry={nodes.Cube001.geometry}
              material={materials.ChickenGuy}
              skeleton={nodes.Cube001.skeleton}
              position={[0, 1.46, 0.59]}
              rotation={[-Math.PI / 2, 0, 0]}
              scale={56}
            />
          )}
          {nodes.Cube003 && materials.ChickenGuy && (
            <skinnedMesh
              name="Cube003"
              geometry={nodes.Cube003.geometry}
              material={materials.ChickenGuy}
              skeleton={nodes.Cube003.skeleton}
              position={[0, 0.692, 0.068]}
              rotation={[-Math.PI / 2, 0, 0]}
              scale={56}
            />
          )}
        </group>
      </group>
    </group>
  );
}

useGLTF.preload('/models/Chicken.glb');